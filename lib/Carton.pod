=head1 NAME

Carton - Perl module dependency manager (aka Bundler for Perl)

=head1 SYNOPSIS

  # During the development
  > cat Makefile.PL
  use inc::Module::Install;
  name 'MyApp';
  version '1.0';
  
  requires 'Plack', 0.9980;
  requires 'Starman', 0.2000;
  
  WriteAll;
  
  > carton install
  > git commit -m "add Plack and Starman" Makefile.PL carton.lock

  # Then elsewhere (on a deployment machine)
  > carton install --deployment
  > carton exec starman -p 8080 myapp.psgi

=head1 WARNING

B<This software is under the heavy development and considered ALPHA
quality till the version hits v1.0.0. Things might be broken, not all
features have been implemented, and APIs will be likely to change. YOU
HAVE BEEN WARNED.>

=head1 DESCRIPTION

carton is a command line tool to track the Perl module dependencies
for your Perl application.

=head1 TUTORIAL

=head2 Initializing the environment

carton will use C<.carton> folder for local configuration and
C<local> to install modules. You're recommended to exclude these
directories from the version control system.

  > carton check
  > echo .carton/ >> .gitignore
  > echo local/ >> .gitignore
  > git add carton.lock
  > git commit -m "Start using carton"

=head2 Tracking the dependencies

You can manage the dependencies of your application via the standard
C<Makefile.PL> or C<Build.PL>.

  # Makefile.PL
  use inc::Module::Install;
  name 'MyAwesomeApp';
  requires 'Plack', 0.9980;
  requires 'Starman', 0.2000;
  WriteAll;

And then you can install these dependencies via:

  > carton install

The modules are installed into your C<local> directory, and the
dependencies tree and version information are analyzed and saved into
C<carton.lock> in your directory.

Make sure you add C<carton.lock> to your version controlled
repository and commit changes as you update dependencies.

  > git commit -m "Added Plack and Starman" Makefile.PL carton.lock

You can aternatively install modules adhoc from the command line,
without managing the build file at all.

  > carton install Devel::NYTProf
  > carton install AnyEvent::Redis

carton will install these modules into C<local> directory in the same
way, and also can track and analyze the dependencies.

=head2 Deploying your application

Once you've done installing all the dependencies, you can push your
application directory to a remote machine (excluding C<local> and
C<.carton>) and run the following command:

  > carton install

This will look at the C<carton.lock> and install the exact same
versions of the dependencies into C<local>, and now your application
is ready to run.

=head2 Bundling modules

carton can bundle all the tarballs for your dependencies into a
directory so that you can even install dependencies that are not
available on CPAN, such as internal distribution aka DarkPAN.

  > carton bundle

will bundle these tarballs into C<local/cache> directory, and

  > carton install --cached

will install modules using this local cache. This way you can avoid a
dependency on CPAN meta DB and search.cpan.org at a deploy time, or
you can have dependencies onto private CPAN modules aka DarkPAN.

=head1 AUTHOR

Tatsuhiko Miyagawa

=head1 COPYRIGHT

Tatsuhiko Miyagawa 2011-

=head1 LICENSE

This software is licensed under the same terms as Perl itself.

=head1 SEE ALSO

L<cpanm>

L<Bundler|http://gembundler.com/>

L<pip|http://pypi.python.org/pypi/pip>

L<npm|http://npmjs.org/>

L<perlrocks|https://github.com/gugod/perlrocks>

L<only>

=cut
